/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package videoclub;

import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;

import static videoclub.VideoClub.PASSWORD;
import static videoclub.VideoClub.URL;
import static videoclub.VideoClub.USERNAME;

public class AlquilarEjemplar extends javax.swing.JFrame {

    /**
     * Creates new form AlquilarEjemplar
     */
    
    DefaultTableModel model;
    
    public AlquilarEjemplar() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("DNI");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Nombre del ejemplar", "Cantidad", "Combo"
            }
        ));
        JComboBox<String> comboBox = new JComboBox<>();
        comboBox.addItem("24 horas");
        comboBox.addItem("48 horas");
        comboBox.addItem("semanal");
        jTable1.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(comboBox));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("ALQUILAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("+");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{"", "0", "24 horas"});
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        realizarCompra();
        this.dispose();
                Menu ventanaPrincipal = new Menu();
                ventanaPrincipal.setLocationRelativeTo(null);
                ventanaPrincipal.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void actualizarCreditosEnBD(int nuevoCreditoDia, int nuevoCreditoDosDias, int nuevoCreditoSemanal) {
        
        try (Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD)) {
            String sql = "UPDATE clientes SET creditoDia = ?, creditoDosDias = ?, creditoSemanal = ? WHERE dni = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setInt(1, nuevoCreditoDia);
                preparedStatement.setInt(2, nuevoCreditoDosDias);
                preparedStatement.setInt(3, nuevoCreditoSemanal);
                preparedStatement.setInt(4, Integer.valueOf(jTextField1.getText()));

                preparedStatement.executeUpdate();

            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private int obtenerLimite(String columna) {
        int limite = 0;
        int dni = Integer.valueOf(jTextField1.getText()); // Reemplaza esto con la forma adecuada de obtener el DNI del cliente

        try (Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD)) {
            String sql = "SELECT " + columna + " FROM clientes WHERE dni = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setInt(1, dni);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        limite = resultSet.getInt(columna);
                    } else {
                        System.out.println("Cliente no encontrado.");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return limite;
    }
    
    private void realizarCompra() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        // Variables para controlar los límites
        int limiteCreditoDia = obtenerLimite("creditoDia");
        int limiteCreditoDosDias = obtenerLimite("creditoDosDias");
        int limiteCreditoSemanal = obtenerLimite("creditoSemanal");

        // Variables para acumular las cantidades de cada categoría
        int totalCreditoDia = 0;
        int totalCreditoDosDias = 0;
        int totalCreditoSemanal = 0;

        // Iterar sobre las filas de la JTable
        for (int i = 0; i < model.getRowCount(); i++) {
            String categoria = model.getValueAt(i, 2).toString();
            int cantidad = Integer.parseInt(model.getValueAt(i, 1).toString());

            // Acumular las cantidades según la categoría
            switch (categoria) {
                case "24 horas":
                    totalCreditoDia += cantidad;
                    break;
                case "48 horas":
                    totalCreditoDosDias += cantidad;
                    break;
                case "semanal":
                    totalCreditoSemanal += cantidad;
                    break;
            }
        }

        // Verificar si alguna categoría supera el límite
        if (totalCreditoDia > limiteCreditoDia || totalCreditoDosDias > limiteCreditoDosDias || totalCreditoSemanal > limiteCreditoSemanal) {
            JOptionPane.showMessageDialog(this, "Una o más categorías exceden el límite de crédito.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Actualizar la base de datos
            actualizarCreditosEnBD(limiteCreditoDia - totalCreditoDia, limiteCreditoDosDias - totalCreditoDosDias, limiteCreditoSemanal - totalCreditoSemanal);
            
            Date fechaActual = new Date();
            for (int i = 0; i < model.getRowCount(); i++) {
                // Obtener datos de la fila
                String nombreEjemplar = model.getValueAt(i, 0).toString();
                int cantidad = Integer.parseInt(model.getValueAt(i, 1).toString());
                String tipoRenta = model.getValueAt(i, 2).toString();

                // Calcular la fecha de entrega según el tipo de renta
                Date fechaEntrega = calcularFechaEntrega(fechaActual, tipoRenta);

                // Obtener la serieVenta y idPelicula desde la base de datos (sustituye con tu lógica)
                int serieVenta = obtenerSerieVentaDesdeBD(nombreEjemplar);
                int idPelicula = obtenerIdPeliculaDesdeBD(nombreEjemplar);

                // Realizar la inserción en la tabla "rentas"
                realizarInsercionEnRentas(Integer.valueOf(jTextField1.getText()), serieVenta, idPelicula, fechaActual, fechaEntrega);
            }

            JOptionPane.showMessageDialog(this, "Compra realizada con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void realizarInsercionEnRentas(int dniCliente, int serieVenta, int idPelicula, Date fechaRenta, Date fechaEntrega) {
        try (Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD)) {
            String sql = "INSERT INTO Rentas (dni_cliente, serieVenta, idPelicula, fechaRenta, fechaEntrega) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setInt(1, dniCliente);
                preparedStatement.setInt(2, serieVenta);
                preparedStatement.setInt(3, idPelicula);
                preparedStatement.setDate(4, new java.sql.Date(fechaRenta.getTime()));
                preparedStatement.setDate(5, new java.sql.Date(fechaEntrega.getTime()));

                int filasAfectadas = preparedStatement.executeUpdate();

                if (filasAfectadas > 0) {
                    System.out.println("Renta realizada correctamente.");
                } else {
                    System.out.println("Error al realizar la renta.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private int obtenerSerieVentaDesdeBD(String nombreEjemplar) {

        int serieVenta = 0;
        // ...
        return serieVenta;
    }

    private int obtenerIdPeliculaDesdeBD(String nombreEjemplar) {

        int idPelicula = 0;
        // ...
        return idPelicula;
    }
    
    private Date calcularFechaEntrega(Date fechaActual, String tipoRenta) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(fechaActual);

        switch (tipoRenta) {
            case "24 horas":
                calendar.add(Calendar.DAY_OF_MONTH, 1);
                break;
            case "48 horas":
                calendar.add(Calendar.DAY_OF_MONTH, 2);
                break;
            case "semanal":
                calendar.add(Calendar.DAY_OF_MONTH, 7);
                break;
            default:
                System.out.println("Tipo de renta no válido.");
                break;
        }

        return calendar.getTime();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlquilarEjemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlquilarEjemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlquilarEjemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlquilarEjemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlquilarEjemplar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
